pipeline {
  agent none

  stages {
    stage('Checkout') {
      agent any
      steps {
        checkout scm
      }
    }

    stage('Build & Test') {
      agent {
        docker {
          image 'maven:3.8.8-eclipse-temurin-17'
          args  '--user root -v /root/.m2:/root/.m2 --entrypoint=""'
        }
      }
      steps {
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package -DskipTests
        '''
        archiveArtifacts artifacts: 'java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/*.jar', fingerprint: true
      }
    }

    stage('Static Code Analysis') {
      agent {
        docker {
          image 'maven:3.8.8-eclipse-temurin-17'
          args  '--user root -v /root/.m2:/root/.m2 --entrypoint=""'
        }
      }
      environment {
        SONAR_URL = 'http://34.72.198.12:9000'
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=${SONAR_TOKEN} \
              -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build & Push Docker Image') {
      agent any
      environment {
        IMAGE_NAME = "airforce7/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${IMAGE_NAME} .
          '''
          def dockerImage = docker.image("${IMAGE_NAME}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment') {
      agent any
      environment {
        GIT_REPO = 'java-cicd-pipeline'
        GIT_USER = 'shubh-swe'
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GIT_TOKEN')]) {
          sh '''
            # Fix detached HEAD by checking out the branch
            git checkout main || git checkout -b main
            git pull origin main || echo "No upstream to pull from"
            
            # Configure git user
            git config user.name "Shubham Dwivedi"
            git config user.email "shubhamdwivedi.spacepilot@gmail.com"
            
            # Update deployment file
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" \
                java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            
            # Check if there are changes to commit
            if git diff --quiet HEAD -- java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml; then
              echo "No changes to commit - deployment already up to date"
            else
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update image to ${BUILD_NUMBER}"
              git push https://${GIT_TOKEN}@github.com/${GIT_USER}/${GIT_REPO}.git HEAD:main
            fi
          '''
        }
      }
    }
  }

  post {
    always {
      node('any') {
        cleanWs(
          cleanWhenNotBuilt: false,
          deleteDirs: true,
          disableDeferredWipeout: true,
          notFailBuild: true
        )
      }
    }
    success {
      node('any') {
        script {
          echo "‚úÖ Pipeline completed successfully!"
          echo "üê≥ Docker Image: airforce7/ultimate-cicd:${BUILD_NUMBER}"
          echo "üöÄ Deployment updated successfully"
          
          try {
            mail to: 'shubhamdwivedi.spacepilot@gmail.com',
                 subject: "‚úÖ Build #${BUILD_NUMBER} SUCCESS - ${JOB_NAME}",
                 body: """
Hi Shubham,

Your CI/CD Pipeline completed successfully! üéâ

üìã Build Details:
‚Ä¢ Job: ${JOB_NAME}
‚Ä¢ Build Number: ${BUILD_NUMBER}
‚Ä¢ Docker Image: airforce7/ultimate-cicd:${BUILD_NUMBER}
‚Ä¢ Build URL: ${BUILD_URL}

üöÄ Next Steps:
‚Ä¢ Your application is ready for deployment
‚Ä¢ Check ArgoCD for automatic sync
‚Ä¢ Monitor application logs

Thanks,
Jenkins CI/CD Bot
                 """
          } catch (Exception e) {
            echo "üìß Mail notification failed: ${e.getMessage()}"
          }
        }
      }
    }
    failure {
      node('any') {
        script {
          try {
            mail to: 'shubhamdwivedi.spacepilot@gmail.com',
                 subject: "‚ùå Build #${BUILD_NUMBER} FAILED - ${JOB_NAME}",
                 body: """
Hi Shubham,

Your CI/CD Pipeline failed! ‚ùå

üìã Build Details:
‚Ä¢ Job: ${JOB_NAME}  
‚Ä¢ Build Number: ${BUILD_NUMBER}
‚Ä¢ Build URL: ${BUILD_URL}
‚Ä¢ Console Output: ${BUILD_URL}console

üîß Action Required:
‚Ä¢ Check the console output for error details
‚Ä¢ Fix the issues and trigger a new build
‚Ä¢ Contact DevOps team if you need assistance

Thanks,
Jenkins CI/CD Bot
                 """
          } catch (Exception e) {
            echo "üìß Mail notification failed: ${e.getMessage()}"
          }
        }
      }
    }
    unstable {
      node('any') {
        script {
          echo "‚ö†Ô∏è Pipeline completed with warnings"
          try {
            mail to: 'shubhamdwivedi.spacepilot@gmail.com',
                 subject: "‚ö†Ô∏è Build #${BUILD_NUMBER} UNSTABLE - ${JOB_NAME}",
                 body: """
Hi Shubham,

Your CI/CD Pipeline completed but with warnings! ‚ö†Ô∏è

üìã Build Details:
‚Ä¢ Job: ${JOB_NAME}
‚Ä¢ Build Number: ${BUILD_NUMBER}  
‚Ä¢ Build URL: ${BUILD_URL}

üîç Action Recommended:
‚Ä¢ Review the console output for warnings
‚Ä¢ Consider fixing non-critical issues
‚Ä¢ Monitor the deployment

Thanks,
Jenkins CI/CD Bot
                 """
          } catch (Exception e) {
            echo "üìß Mail notification failed: ${e.getMessage()}"
          }
        }
      }
    }
  }
}
